---
# Release Service workflow.
# Detects service version based on tags and commit history (used to generate prerelease version).
# Publishes Apolo service as ghcr.io Docker image and Helm Chart,
# Creates GitHub release with linked issues and pull requests 

on:
  workflow_call:
    inputs:
      image:
        description: short image name without repo/owner and tag, e.g. platformstorageapi
        required: true
        type: string
      helm_charts:
        description: A space-separated list of helm charts
        required: true
        type: string
      artifact:
        description: The artifact name uploaded by upload-image-action
        required: false
        default: image
        type: string
    outputs:
      version:
        description: Version
        value: ${{ jobs.release.outputs.version }}
      prerelease:
        description: Prerelease
        value: ${{ jobs.release.outputs.prerelease }}

permissions:
#  actions: write  # for artifact removal
  contents: write  # for release creation
  packages: write  # for publishing on ghcr.io

jobs:
  release:
    name: Release image and helm chart
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      prerelease: ${{ steps.meta.outputs.prerelease }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: paulhatch/semantic-version@v5.4.0
      id: semver
      with:
        version_format: ${major}.${minor}.${patch}-dev.${increment}
    - name: Detect metadata
      id: meta
      run: |
        import os
        import re
        import subprocess
        import sys
        from datetime import datetime, timedelta

        def to_bool(value):
          return "true" if value else ""

        ref = "${{ github.ref }}"
        PRE = "refs/tags/"
        tag = ref[len(PRE):] if ref.startswith(PRE) else ""

        if tag:
          print(f"Commit has tag {tag}, checking it's format")

          match = re.match(r"^v\d+\.\d+(\.\d+)?(?P<pre>-(a|b|rc|dev)\.\d*)?$", tag)
          if not match:
            print(
              f"::error:: Invalid tag {tag}; ",
              "The tag should have vYY.MM.NN[-{a|b|rc}.N] format ",
              "where YY is the current year, MM is the current month, "
              "NN is incremental number, "
              "every next month the number resets to 0, "
              "a -- alpha, b -- beta, rc -- release candidate, dev -- development, N -- number.",
            )
            sys.exit(1)
          else:
            version = tag[1:]
            is_prerelease = bool(match.group("pre"))
        else:
          print("Commit has not tag, generating version based on the commit history")

          is_prerelease = True
          version = "${{ steps.semver.outputs.version }}"
          version_major = int(${{ steps.semver.outputs.major }})
          version_minor = int(${{ steps.semver.outputs.minor }})

          year = datetime.utcnow().year % 1000
          month = datetime.utcnow().month

          if (year > version_major or month > version_minor):
            print(
              f"Generated version {version} doesn't correspond to the current month,",
              "checking the next version",
            )

            prev_month_last_day = datetime(year, month, 1) - timedelta(days=1)
            prev_month_last_day = prev_month_last_day.strftime("%d.%m.%Y")
            patch = subprocess.check_output(
              f"git log --after '{prev_month_last_day}' --pretty='oneline' | wc -l", shell=True
            ).decode().strip()
            patch = int(patch) - 1
            if patch >= 0:
              version = f"{year}.{month}.0-dev.{patch}"
            else:
              print(f"No commits in the current month, probably this is a job restart, using {version}")

        print("Detected version:", version)

        with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            print(f"tag={tag}", file=f)
            print(f"version={version}", file=f)
            print(f"prerelease={to_bool(is_prerelease)}", file=f)
      shell: python
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.14.0
    # - name: Purge old artifacts
    #   uses: kolpav/purge-artifacts-action@v1
    #   with:
    #     token: ${{ github.token }}
    #     expire-in: 30mins
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact }}
    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - name: Load image into docker
      run: |
        docker load --input ${{ inputs.image }}.tar
      shell: bash
    - name: Tag remote latest image
      run: |
        docker tag ${{ inputs.image }}:latest ghcr.io/neuro-inc/${{ inputs.image }}:latest
      shell: bash
    - name: Tag remote versioned image
      run: |
        docker tag ${{ inputs.image }}:latest ghcr.io/neuro-inc/${{ inputs.image }}:${{ steps.meta.outputs.version }}
      shell: bash
    - name: Push latest image to ghcr.io
      run: |
        docker push ghcr.io/neuro-inc/${{ inputs.image }}:latest
      shell: bash
    - name: Push versioned image to ghcr.io
      run: |
        docker push ghcr.io/neuro-inc/${{ inputs.image }}:${{ steps.meta.outputs.version }}
      shell: bash
    - name: Create chart
      run: |
        for HELM_CHART in $CHARTS; do
          VALUES=$(cat charts/${HELM_CHART}/values.yaml | envsubst)
          echo "$VALUES" > charts/${HELM_CHART}/values.yaml
        done
      env:
        # envs are used by envsubst above
        IMAGE_REPO: ghcr.io/neuro-inc/${{ inputs.image }}
        IMAGE_TAG: ${{ steps.meta.outputs.version }}
        CHARTS: ${{ inputs.helm_charts }}
      shell: bash
    - name: Release chart
      run: |
        echo $CR_TOKEN | helm registry login ghcr.io -u x-access-token --password-stdin
        for HELM_CHART in $CHARTS; do
          helm package charts/${HELM_CHART} -u --version ${{ steps.meta.outputs.version }} --app-version ${{ steps.meta.outputs.version }}
          helm push ${HELM_CHART}-${{ steps.meta.outputs.version }}.tgz oci://ghcr.io/neuro-inc/helm-charts
        done
      env:
        CHARTS: ${{ inputs.helm_charts }}
        CR_TOKEN: ${{ github.token }}
      shell: bash
    - name: GitHub Release
      uses: ncipollo/release-action@v1.9.0
      if: steps.meta.outputs.prerelease != 'true'
      with:
        name: ${{ steps.meta.outputs.version }}
        prerelease: ${{ steps.meta.outputs.prerelease }}
        generateReleaseNotes: 'true'
        tag: ${{ steps.semver.outputs.version_tag }}
        token: ${{ github.token }}
